import express from "express";
import axios from "axios";

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    models: ["Model 3", "Model Y", "Model X"], // –º–æ–¥–µ–ª–∏ –¥–ª—è Telegram
    maxPrice: 25000,                            // —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã –¥–ª—è Telegram
    region: "US",                               // —Ä–µ–≥–∏–æ–Ω
    checkIntervalSec: 120,                      // –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    jitterSec: 20                               // –¥–∂–∏—Ç—Ç–µ—Ä ¬±20 —Å–µ–∫—É–Ω–¥
};

// Telegram
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;

let cachedVINs = new Set();
let hasNewCars = false;
let isFirstRun = true; // —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

let lastResponses = [];

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
async function sendToTelegram(text) {
    try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            chat_id: CHAT_ID,
            text
        });
        console.log("üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Telegram:", error.message);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω —Å price <= 27,000
async function fetchCars() {
    try {
        const query = encodeURIComponent(JSON.stringify({
            query: {
                condition: "used",
                arrangeby: "Relevance",
                order: "desc",
                market: CONFIG.region,
                price: { max: 27000 } // –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∑–∞–ø—Ä–æ—Å
            },
            offset: 0,
            count: 50,
            outsideOffset: 0,
            outsideSearch: false
        }));

        const url = `https://www.tesla.com/inventory/api/v4/inventory-results?query=${query}`;

        const { data, status } = await axios.get(url, {
            headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                "Accept": "application/json, text/plain, */*"
            },
            validateStatus: () => true
        });

        if (status !== 200) {
            throw new Error(`Tesla –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å ${status}`);
        }

        const cars = (data.results || []).map(car => ({
            vin: car.VIN,
            model: car.Model,
            year: car.Year,
            price: car.PurchasePrice,
            odometer: car.Odometer,
            city: car.City,
            state: car.StateProvince,
            addedDate: car.AddedDate
        }));

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ CONFIG –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
        const filtered = cars.filter(car =>
            CONFIG.models.includes(car.model) && (car.price === null || car.price <= CONFIG.maxPrice)
        );

        const fresh = isFirstRun
            ? filtered
            : filtered.filter(car => !cachedVINs.has(car.vin));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        fresh.forEach(car => cachedVINs.add(car.vin));

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –¥–ª—è Telegram
        const now = new Date();
        lastResponses.push({ time: now.toLocaleTimeString(), total: cars.length, newCars: fresh.length });
        if (lastResponses.length > 10) lastResponses.shift();

        let reportText = `üìä –í—Å–µ–≥–æ –º–∞—à–∏–Ω —Å —Ü–µ–Ω–æ–π <= 27,000: ${cars.length}\n`;
        reportText += `üöò –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Ñ–∏–≥—É (–º–æ–¥–µ–ª–∏ + maxPrice ${CONFIG.maxPrice}): ${filtered.length}\n`;

        if (fresh.length > 0) {
            const carsText = fresh.map(car =>
                `üöó ${car.year} ${car.model}
–¶–µ–Ω–∞: ${car.price ? "$" + car.price : "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–∞"}
–ü—Ä–æ–±–µ–≥: ${car.odometer} –º–∏–ª—å
–ú–µ—Å—Ç–æ: ${car.city}, ${car.state}
VIN: ${car.vin}
–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${car.addedDate}
üîó https://www.tesla.com/m3/order/${car.vin}`
            ).join("\n\n");
            reportText += `\n\nüî• –ù–æ–≤—ã–µ –º–∞—à–∏–Ω—ã:\n\n${carsText}`;
            hasNewCars = true;
        }

        if (reportText) await sendToTelegram(reportText);

        isFirstRun = false;

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
    }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å setInterval –∏ –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
function scheduleFetch() {
    const jitter = Math.floor(Math.random() * (CONFIG.jitterSec * 2 + 1)) - CONFIG.jitterSec;
    const interval = (CONFIG.checkIntervalSec + jitter) * 1000;

    setTimeout(async () => {
        await fetchCars();
        scheduleFetch();
    }, interval);
}

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
scheduleFetch();

// –ï–∂–µ—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
setInterval(async () => {
    if (!hasNewCars) {
        await sendToTelegram(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω –Ω–µ—Ç: ${new Date().toLocaleTimeString()}`);
    }
    hasNewCars = false;
}, 60 * 60 * 1000);

// –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ ‚Äî –æ—Ç—á—ë—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞
setInterval(async () => {
    const configText = `üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:
–ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: –∫–∞–∂–¥—ã–µ ${CONFIG.checkIntervalSec} —Å–µ–∫ ¬±${CONFIG.jitterSec} —Å–µ–∫
–†–µ–≥–∏–æ–Ω: ${CONFIG.region}
–ú–æ–¥–µ–ª–∏: ${CONFIG.models.join(", ")}
–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã –¥–ª—è Telegram: $${CONFIG.maxPrice}
–û—Ç—á—ë—Ç—ã: —Å—Ç–∞—Ç—É—Å —Ä–∞–∑ –≤ —á–∞—Å, –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞

üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞:`;

    const last3 = lastResponses.slice(-3).map(r => `${r.time} ‚Äî –≤—Å–µ–≥–æ: ${r.total}, –Ω–æ–≤—ã—Ö: ${r.newCars}`).join("\n");

    await sendToTelegram(configText + "\n\n" + last3);
}, 3 * 60 * 60 * 1000);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"));
